name: 'Terraform Force Unlock'
description: 'Force unlock a Terraform state lock'
inputs:
  token:
    description: 'Token for backend authentication'
    required: true
  lock_id:
    description: 'Lock ID to force unlock'
    required: true
  working_directory:
    description: 'Directory to run terraform commands in'
    required: false
    default: '.'
  backend_config_file:
    description: 'Path to backend config file'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Terraform Init
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        TF_HTTP_PASSWORD: ${{ inputs.token }}
      run: |
        INIT_ARGS="terraform init"
        
        # Add backend config file if specified
        if [ -n "${{ inputs.backend_config_file }}" ]; then
          INIT_ARGS="$INIT_ARGS -backend-config=${{ inputs.backend_config_file }}"
        fi
        
        eval $INIT_ARGS
        
    - name: Force Unlock Terraform State
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        TF_HTTP_PASSWORD: ${{ inputs.token }}
      run: |
        terraform force-unlock -force ${{ inputs.lock_id }}
        
    - name: Verify State Lock Status
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        TF_HTTP_PASSWORD: ${{ inputs.token }}
      run: |
        echo "State unlock operation completed. Checking current locks..."
        # Note: There's no direct command to list current locks in Terraform
        # This is a simple test to see if Terraform can access the state
        terraform state list || echo "Warning: Could not fetch state list"